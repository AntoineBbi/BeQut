w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j, ] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
params <- c("beta", "sigma", "L_b")
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqm,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
// observed data
int<lower=0> n; // number of observations
int<lower=0> I; // number of subjects
vector[n] y;    // response variable
vector[n] id;    // response variable
int<lower=0> ncX; // number of covariate including intercept
row_vector[ncX] X[n]; // design matrix of fixed effects
int<lower=0> ncU; // number of subject-specific random effects
row_vector[ncU] U[n]; // design matrix of random effects
real<lower=0, upper=1> tau; // order of quantile of interest
}
parameters {
vector[ncX] beta;        //regressors paramters (column vector)
real<lower=0> sigma;   // scale parameter
vector<lower=0>[n] w;  // latent variable distributed via exponential distribution
vector<lower=0>[ncU] b_sd;   // scale parameter
cholesky_factor_corr[ncU > 1 ? ncU : 0] L_b;  // lower triangular square root of Sigma_b
matrix[ncU, I] z_b;  // subj ranef, i.e. unscaled group level
}
transformed parameters{
real c1;
real c2;
c1 = (1-2*tau)/(tau*(1-tau));
c2 = 2/(tau*(1-tau));
vector[ncU] b[I];
if (ncU == 1)
b = (b_sd[1] * z_b)';
else if (ncU > 1)
b = (diag_pre_multiply(b_sd, L_b) * z_b)';
}
model { // likelihood + prior
//Prior:
for(p in 1:ncX){
beta[p] ~ normal(0, 100);
}
sigma ~ inv_gamma(100, 100);
L_b ~ lkj_corr_choleski(2.0);
for (i in 1:I){
z_b[i] ~ normal(0,1);
}
//likelihood:
vector[n] mu;         // mean
vector[n] sigma2_e;   // variance of dnorm
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j, ] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
# data stan
names(data.lqmm.list)
data.lqmm.stan <- c(data.lqmm.list,
I = I
)
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
// observed data
int<lower=0> n; // number of observations
int<lower=0> I; // number of subjects
vector[n] y;    // response variable
vector[n] id;    // response variable
int<lower=0> ncX; // number of covariate including intercept
row_vector[ncX] X[n]; // design matrix of fixed effects
int<lower=0> ncU; // number of subject-specific random effects
row_vector[ncU] U[n]; // design matrix of random effects
real<lower=0, upper=1> tau; // order of quantile of interest
}
parameters {
vector[ncX] beta;        //regressors paramters (column vector)
real<lower=0> sigma;   // scale parameter
vector<lower=0>[n] w;  // latent variable distributed via exponential distribution
vector<lower=0>[ncU] b_sd;   // scale parameter
cholesky_factor_corr[ncU > 1 ? ncU : 0] L_b;  // lower triangular square root of Sigma_b
matrix[ncU, I] z_b;  // subj ranef, i.e. unscaled group level
}
transformed parameters{
real c1;
real c2;
c1 = (1-2*tau)/(tau*(1-tau));
c2 = 2/(tau*(1-tau));
vector[ncU] b[I];
if (ncU == 1)
b = (b_sd[1] * z_b)';
else if (ncU > 1)
b = (diag_pre_multiply(b_sd, L_b) * z_b)';
}
model { // likelihood + prior
//Prior:
for(p in 1:ncX){
beta[p] ~ normal(0, 100);
}
sigma ~ inv_gamma(100, 100);
L_b ~ lkj_corr_choleski(2.0);
for (i in 1:I){
z_b[i] ~ normal(0,1);
}
//likelihood:
vector[n] mu;         // mean
vector[n] sigma2_e;   // variance of dnorm
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
tau
data.lqmm.list$tau
stan_lqmm <- "
data {
// observed data
int<lower=0> n; // number of observations
int<lower=0> I; // number of subjects
vector[n] y;    // response variable
vector[n] id;    // response variable
int<lower=0> ncX; // number of covariate including intercept
row_vector[ncX] X[n]; // design matrix of fixed effects
int<lower=0> ncU; // number of subject-specific random effects
row_vector[ncU] U[n]; // design matrix of random effects
real<lower=0, upper=1> tau; // order of quantile of interest
real c1;
real c2;
}
parameters {
vector[ncX] beta;        //regressors paramters (column vector)
real<lower=0> sigma;   // scale parameter
vector<lower=0>[n] w;  // latent variable distributed via exponential distribution
cholesky_factor_corr[ncU] L_b;  // lower triangular square root of Sigma_b
vector<lower=0>[ncU] b_sd;   // scale parameter
vector[ncU] z_b[I]];  // subj ranef, i.e. unscaled group level
}
transformed parameters{
vector[ncU] b[I];
matrix[ncU, ncU] Sigma_b;
Sigma_b = diag_pre_multiply(b_sd, L_b);
for (i in 1:I){
b[i] = Sigma_b * z_b[i];
}
}
model { // likelihood + prior
//Prior:
L_b ~ lkj_corr_choleski(2.0);
for (i in 1:I){
z_b[i] ~ normal(0,1);
}
//likelihood:
vector[n] sigma2_e;   // variance of dnorm
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
# data stan
names(data.lqmm.list)
data.lqmm.stan <- c(data.lqmm.list,
I = I,
c1 = (1-2*tau)/(tau*(1-tau)),
c2 = 2/(tau*(1-tau))
)
params <- c("beta", "sigma", "L_b")
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
int<lower=0> n;
int<lower=0> I;
vector[n] y;
vector[n] id;
int<lower=0> ncX;
row_vector[ncX] X[n];
int<lower=0> ncU;
row_vector[ncU] U[n];
real<lower=0, upper=1> tau;
real c1;
real c2;
}
parameters {
vector[ncX] beta;
real<lower=0> sigma;
vector<lower=0>[n] w;
cholesky_factor_corr[ncU] L_b;
vector<lower=0>[ncU] b_sd;
vector[ncU] z_b[I]];
}
transformed parameters{
vector[ncU] b[I];
matrix[ncU, ncU] Sigma_b;
Sigma_b = diag_pre_multiply(b_sd, L_b);
for (i in 1:I)
b[i] = Sigma_b * z_b[i];
}
model {
L_b ~ lkj_corr_choleski(2.0);
for (i in 1:I)
z_b[i] ~ normal(0,1);
vector[n] sigma2_e;
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
int<lower=0> n;
int<lower=0> I;
vector[n] y;
vector[n] id;
int<lower=0> ncX;
row_vector[ncX] X[n];
int<lower=0> ncU;
row_vector[ncU] U[n];
real<lower=0, upper=1> tau;
real c1;
real c2;
}
parameters {
vector[ncX] beta;
real<lower=0> sigma;
vector<lower=0>[n] w;
cholesky_factor_corr[ncU] L_b;
vector<lower=0>[ncU] b_sd;
vector[ncU] z_b[I];
}
transformed parameters{
vector[ncU] b[I];
matrix[ncU, ncU] Sigma_b;
Sigma_b = diag_pre_multiply(b_sd, L_b);
for (i in 1:I)
b[i] = Sigma_b * z_b[i];
}
model {
L_b ~ lkj_corr_choleski(2.0);
for (i in 1:I)
z_b[i] ~ normal(0,1);
vector[n] sigma2_e;
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
int<lower=0> n;
int<lower=0> I;
vector[n] y;
vector[n] id;
int<lower=0> ncX;
row_vector[ncX] X[n];
int<lower=0> ncU;
row_vector[ncU] U[n];
real<lower=0, upper=1> tau;
real c1;
real c2;
}
parameters {
vector[ncX] beta;
real<lower=0> sigma;
vector<lower=0>[n] w;
cholesky_factor_corr[ncU] L_b;
vector<lower=0>[ncU] b_sd;
vector[ncU] z_b[I];
}
transformed parameters{
vector[ncU] b[I];
matrix[ncU, ncU] Sigma_b;
Sigma_b = diag_pre_multiply(b_sd, L_b);
for (i in 1:I)
b[i] = Sigma_b * z_b[i];
}
model {
L_b ~ lkj_corr_cholesky(2.0);
for (i in 1:I)
z_b[i] ~ normal(0,1);
vector[n] sigma2_e;
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
stan_lqmm <- "
data {
int<lower=0> n;
int<lower=0> I;
vector[n] y;
int<lower=1,upper=I> id[n];
int<lower=0> ncX;
row_vector[ncX] X[n];
int<lower=0> ncU;
row_vector[ncU] U[n];
real<lower=0, upper=1> tau;
real c1;
real c2;
}
parameters {
vector[ncX] beta;
real<lower=0> sigma;
vector<lower=0>[n] w;
cholesky_factor_corr[ncU] L_b;
vector<lower=0>[ncU] b_sd;
vector[ncU] z_b[I];
}
transformed parameters{
vector[ncU] b[I];
matrix[ncU, ncU] Sigma_b;
Sigma_b = diag_pre_multiply(b_sd, L_b);
for (i in 1:I)
b[i] = Sigma_b * z_b[i];
}
model {
L_b ~ lkj_corr_cholesky(2.0);
for (i in 1:I)
z_b[i] ~ normal(0,1);
vector[n] sigma2_e;
for(j in 1:n){
w[j] ~ exponential(1/sigma);
sigma2_e[j] = sigma*c2*w[j];
y[j] ~ normal(X[j] * beta + U[j] * b[id[j]] + c1*w[j], pow(sigma2_e[j], 0.5));
}
}
"
stan_lqm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
params <- c("beta", "sigma", "L_b")
start_lqmm_stan_psy <- Sys.time()
stan_lqmm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
end_lqmm_stan_psy <- Sys.time()
data.lqmm.stan$n
lenght(data.lqmm.stan$y)
length(data.lqmm.stan$y)
data.lqmm.stan$I
N = length(y)
data.lqmm.list <- list(y = y,
X = X,
U = U,
tau = tau,
n = n,
N = N,
id = data.lqmm$id,
ncX = ncol(X),
ncU = ncol(U))
data.lqmm.stan <- c(data.lqmm.list,
c1 = (1-2*tau)/(tau*(1-tau)),
c2 = 2/(tau*(1-tau))
)
names(data.lqmm.stan)
n = length(y)
# Set-up the data generating mechainsm
I <- 500
data.lqmm.list <- list(y = y,
X = X,
U = U,
tau = tau,
I = I,
n = n,
id = data.lqmm$id,
ncX = ncol(X),
ncU = ncol(U))
data.lqmm.stan <- c(data.lqmm.list,
c1 = (1-2*tau)/(tau*(1-tau)),
c2 = 2/(tau*(1-tau))
)
params <- c("beta", "sigma", "L_b")
start_lqmm_stan_psy <- Sys.time()
stan_lqmm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 5000,
verbose = TRUE,
pars = params)
start_lqmm_stan_psy <- Sys.time()
stan_lqmm_fit <- stan(model_code = stan_lqmm,
chains = 3,
data = data.lqmm.stan,
iter = 500,
verbose = TRUE,
pars = params)
end_lqmm_stan_psy <- Sys.time()
print(stan_lqmm_fit)
sqrt(0.75)
setwd("C:/Users/abarbieri/Seafile/Package R/BeQut")
install.packages("usethis")
library(usethis)
usethis::creatrepackage(".")
usethis::create_package()
?usethis::create_package()
?usethis::create_package()
usethis::create_package(".")
library(devtools)
getwd()
path <- getwd()
path
usethis::create_package(path)
devtools::document()
4505.35*0.6
2670/4
devtools::check()
?lmer
install.packages("lme4")
?lmer
library(lme4)
library(lme4)
?lmer
devtools::check_rhub()
usethis::use_news_md()
devtools::spell_check()
devtools::check_win_devel()
devtools::check_rhub()
devtools::check()
usethis::use_news_md()
usethis::use_news_md()
devtools::load_all(".")
library(BeQut)
devtools::check_win_devel()
devtools::check_rhub()
usethis::use_cran_comments()
2.52*1.8
2.52*2.6
1.8*2.6
devtools::check_win_devel()
devtools::check_rhub()
devtools::check_win_devel()
devtools::check_rhub()
usethis::use_github_action_check_release()
usethis::use_github_action("check-standard")
usethis::create_github_token()
gitcreds::gitcreds_set()
devtools::submit_cran()
devtools::submit_cran()
?BeQut
usethis::use_package_doc()
library(BeQut)
library(BeQut)
?BeQut
?BeQut
?`BeQut-package`
library(BeQut)
?BeQut
usethis::use_package_doc()
roxygen2::roxygenize()
?BeQut
library(BeQut)
?BeQut
?usethis::use_package_doc
library(BeQut)
devtools::submit_cran()
